// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static int NUM_BITS;
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        var int currentVal;

        let i = 0;
        let currentVal = 1;
        let NUM_BITS = 16;
        let twoToThe = Array.new(16);

        while(i < NUM_BITS) {
            let twoToThe[i] = currentVal;
            let currentVal = currentVal + currentVal;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while(i < NUM_BITS) {
            if(~(Math.bit(i, y) = 0))
            {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;

        if (y = 0) {
            do Sys.error(3);
        }
        if (x < 0) {
            return -Math.divide(-x, y);
        }
        if (y < 0) {
            return -Math.divide(x, -y);
        }
        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return 2 * q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, checked, squared;

        if (x < 0) {
            do Sys.error(4);
            return 0;
        }

        let y = 0;
        let j = NUM_BITS / 2 - 1;
        while(~(j < 0)) {
            let checked = y + twoToThe[j];
            let squared = Math.multiply(checked, checked);
            if(~(squared > x) & (squared > 0)) {
                let y = checked;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    function int bit(int x, int j) {
        return x & twoToThe[j];
    }
}
