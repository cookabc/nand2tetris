// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static Array bitVector;

    /** Initializes the Screen. */
    function void init() {
        var int bit, count;
        let color = true;
        let bitVector = Array.new(16);
        let bit = 1;
        while (count < 16) {
            let bitVector[count] = bit;
            let bit = bit + bit;
            let count = count + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 24575) {
            do Memory.poke(i, false);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int loc, bit, i, value,j;
        let j = x / 16;
        let loc = 16384 + (y * 32) + j;
        let i = x - (j * 16);
        let bit = bitVector[i];
        let value = Memory.peek(loc);
        if (color) {
            let value = value | bit;
        } else {
            let value = value & (~bit);
        }
        do Memory.poke(loc, value);
        return;
    }

    function void drawHorizontal(int x1, int x2, int y) {
        var int value1, value2, i1, i2, j, bit1, bit2, loc1, loc2;
        let j = (x1 / 16);
        let loc1 = 16384 + (y * 32) + j;
        let i1 = x1 - (j * 16);
        let j = (x2 / 16);
        let loc2 = 16384 + (y * 32) + j;
        let i2 = x2 - (j * 16);
        if (loc1 = loc2) {
            let j = Math.abs(i1 - i2) + 1;
            let i1 = Math.min(i1, i2);
            while (j > 0) {
                let bit1 = bit1 + bitVector[i1];
                let j = j - 1;
                let i1 = i1 + 1;
            }
            let value1 = Memory.peek(loc1);
            if (color) {
                let value1 = value1 | bit1;
            } else {
                let value1 = value1 & (~bit1);
            }
            do Memory.poke(loc1, value1);
            return;
        }
        while (~(i1 > 15)) {
            let bit1 = bit1 + bitVector[i1];
            let i1 = i1 + 1;
        }
        while (~(i2 < 0)) {
            let bit2 = bit2 + bitVector[i2];
            let i2 = i2 - 1;
        }
        let value1 = Memory.peek(loc1);
        let value2 = Memory.peek(loc2);
        if (color) {
            let value1 = value1 | bit1;
            let value2 = value2 | bit2;
        } else {
            let value1 = value1 & (~bit1);
            let value2 = value2 & (~bit2);
        }
        do Memory.poke(loc1, value1);
        do Memory.poke(loc2, value2);
        let loc1 = loc1 + 1;
        while (loc1 < loc2) {
            do Memory.poke(loc1, color);
            let loc1 = loc1 + 1;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx, f;
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dy = 0) {
            if (x2 > x1) {
                do Screen.drawHorizontal(x1, x2, y1);
            } else{
                do Screen.drawHorizontal(x2, x1, y1);
            }
            return;
        }
        if (dx < 0) {
            let dx = -dx;
            let f = x1;
            let x1 = x2;
            let x2 = f;
            let f = y1;
            let y1 = y2;
            let y2 = f;
            let dy = -dy;
        }
        if (dy < 0) {
            let dy = -dy;
            let f = -1;
        } else{
            let f = 1;
        }
        while (~((a > dx) | (b > dy) | (a < 0) | (b < 0))) {
            do Screen.drawPixel(x1 + a, y1 + (f * b));
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawHorizontal(x1, x2, y1);
            let y1 = y1 + 1;
        }
	return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, root;
        let dy = (-r) + 1;
        while (dy < r) {
            let root = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawHorizontal(x - root, x + root, y + dy);
            let dy = dy + 1;
        }
        do Screen.drawPixel(x, y + r);
        do Screen.drawPixel(x, y - r);
        return;
    }
}
