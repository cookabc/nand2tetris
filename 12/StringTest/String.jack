// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int len;
    field int maxLen;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let len = 0;
        let maxLen = maxLength;
        let chars = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (maxLen > len) {
            let chars[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
		var boolean neg;
        var int i;
		var int sum;

		let sum = 0;

		if ((len > 0) & (chars[0] = 45)) { // '-' sign in ascii
			let neg = true;
			let i = 1;
		} else {
			let neg = false;
			let i = 0;
		}

		while (i < len) {
			if (chars[i] > 47 & chars[i] < 58) { // the char is a digit between 0 to 9 in ascii
				let sum = (sum * 10) + (chars[i] - 48);
			}
			let i = i + 1;
		}

		if (neg) {
			return -sum;
		} else {
			return sum;
		}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if (val < 0) {
            let maxLen = 1;
            let len = 0;
            do appendChar(45);
            do setInt(-(val / 10));
            let maxLen = maxLen + 1;
            do appendChar(-(val - ((val / 10) * 10)) + 48);
            return;
        }
        if (val < 10) {
            if (~((maxLen = 1) & (chars[0] = 45))) {
                let maxLen = 0;
                let len = 0;
            }
            let maxLen = maxLen + 1;
            do appendChar(val + 48);
        } else {
            do setInt(val / 10);
            let maxLen = maxLen + 1;
            do appendChar(val - ((val / 10) * 10) + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
